/**
 * Holding an Issuer provides the ability to create amounts and empty purses,
 * but confers no rights. It is also the mechanism used to get exclusive access
 * to a Purse or Payment that you already hold, or to burn some or all of the
 * contained rights.
 */
interface Issuer (Amount (Quantity)) {
  /**
   * Get the label for this Issuer.
   *
   * Labels can be used to manually construct amounts
   */
  getLabel() -> (Comparable);

  /* Get the Assay for this Issuer. */
  getAssay() -> (Assay);

  /** Make an Amount that contains the indicated quantity. */
  makeAmount(quantity :Quantity) -> (Amount);

  /** Make an empty purse associated with this kind of right. */
  makeEmptyPurse(name :String) -> (Purse);

  /**
   * Make a new Payment that has exclusive rights to the amount, only if src had
   * those rights, exclusively or not. The src payment retains any excess not
   * included in amount.
   */
  claim(amount :Amount, src :Payment, name :String = 'a payment')
    -> (Payment);

  /**
   * Make a new Payment that has exclusive rights to all the contents of src.
   */
  claimAll(src :Payment, name :String = 'a payment') -> (Payment);

  /** Burn amount of the rights from src. */
  burn(amount :Amount, src :Payment) -> (Amount);

  /** Burn all of the rights from src. */
  burnAll(src :Payment) -> (Amount);
}

/**
 * Makes Mints.
 *
 * The description becomes part of the label, used by the assay to identify
 * amounts authorized/acknowledged by the mint. The MintController and Assay
 * must be compatible with the type of asset managed by the mint.
 *
 * Description doesn't have to be a string, but it will only be used for its
 * value.
 */
interface MintMaker {
  makeMint(
      description :Comparable,
      makeConfig :MintConfigMaker) -> (Mint);
}

/**
 * Holding a Mint carries the right to control issuance and destruction of
 * purses and payments containing amounts of a particular currency. Purses (and
 * payments) associated with a particular issuer can only transfer value to
 * others using the same mint.
 */
interface Mint (Amount (Quantity)) {
  /** Get the Issuer for this mint. */
  getIssuer() -> (Issuer);

  /**
   * Create a new Purse containing the amount. Give it the specified name or 'fa
   * purse'.
   */
  mint(initialBalance :Amount, name :String = 'a purse') -> (Purse);
}

/**
 * Purses hold verified amounts of certain rights issued by Mints. Purses can
 * transfer part of the balance they hold in a payment, which has a narrower
 * interface. A purse's balance can rise and fall, through the action of
 * deposit() and withdraw(), while payments don't accept deposits, but can be
 * reduced with burn(), aggregated by passing them as a parameter to deposit(),
 * or claimed using issuer.claim().
 *
 * The primary use for Purses and Payments is for currency-like and goods-like
 * valuables, but they can also be used to represent other kinds of rights, such
 * as the right to participate in a particular contract.
 */
interface Purse (Amount) {
  /** Get the name of this purse. */
  getName() -> (String);

  /** Get the Issuer for this mint. */
  getIssuer() -> (Issuer);

  /** Get the amount contained in this purse, confirmed by the issuer. */
  getBalance() -> (Amount);

  /** Deposit amount from srcPayment into this purse, returning the amount. */
  deposit(amount :Amount, srcPayment :Payment) -> (Amount);

  /**
   * Deposit all the contents of srcPayment into this purse, returning the
   * amount.
   */
  depositAll(srcPayment :Payment) -> (Amount);

  /** Withdraw amount from this purse into a new Payment. */
  withdraw(amount :Amount, name :String) -> (Payment);

  /** Withdraw entire content of this purse into a new Payment. */
  withdrawAll(name :String) -> (Payment);
}

/**
 * Payments hold verified amounts of certain rights issued by Mints. Amounts
 * from payments can be deposited in purses, but otherwise, the entire amount is
 * available when the payment is transferred. A payment's balance can only fall,
 * through the action of deposit(), claim() or burn().
 *
 * Payments can be converted to Purses by getting a verified issuer and calling
 * issuer.makeEmptyPurse().depositAll(payment);
 */
interface Payment (Amount) {
  /** Get the name of this purse. */
  getName() -> (String);

  /** Get the Issuer for this mint. */
  getIssuer() -> (Issuer);

  /** Get the amount contained in this payment, confirmed by the issuer. */
  getBalance() -> (Amount);
}
